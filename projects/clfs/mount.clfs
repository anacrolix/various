#!/usr/bin/env python

from errno import *
from stat import *
from os import strerror
from sys import argv
import logging
import os.path

from fuse import FUSE, Operations, LoggingMixIn, fuse_get_context
from clfs import Clfs, ClfsError
import clfs


logger = logging.getLogger("fuseclfs")


class FuseClfs(
            #LoggingMixIn,
            Operations,
        ):

    def __call__(self, op, path, *args):
        # this code is based on fuse.LoggingMixIn.__call__
        logger = logging.getLogger("fusepy")
        logger.debug("%s<-%r", op, (path,) + args)
        #print '->', op, path, repr(args)
        # perhaps this should be "[Unhandled exception]"
        ret = '[Unhandled Exception]'
        try:
            ret = getattr(self, op)(path, *args)
            return ret
        # this catches ClfsError as its derived from OSError
        except OSError, e:
            ret = str(e)
            raise
        finally:
            #print '<-', op, repr(ret)
            logger.debug("%s->%s", op, repr(ret)[:0x100])

    def __init__(self, device):
        #self.log =
        self.fs = Clfs(device)

    create = None
    access = None # default_permission is used
    open = None
    flush = None

    def _readdir(self, path, offset, handle=None):
        yield "."
        yield ".."
        parent_dirent = self.fs.get_dir_entry(path)
        for dirent in self.fs.read_directory(parent_dirent["ino"]):
            yield (
                dirent["name"].rstrip("\0"),
                dict(st_inode=dirent["ino"]),
                0)

    def readdir(self, *args, **kwargs):
        return tuple(self._readdir(*args, **kwargs))

    def utimens(self, path, times):
        self.fs.node_touch(self.fs.get_dir_entry(path)["ino"], times)

    def getattr(self, path, fh=None):
        assert fh is None, fh
        dirent = self.fs.get_dir_entry(path)
        inode = self.fs.get_inode_struct(dirent["ino"])
        return dict(
                st_mode=inode["mode"],
                st_nlink=inode["nlink"],
                st_size=inode["size"],
                st_uid=inode["uid"],
                st_gid=inode["gid"],
                st_rdev=inode["rdev"],
                **inode.get_st_times())

    def mkdir(self, path, mode):
        return self.mknod(path, mode | S_IFDIR, 0)

    def rmdir(self, path):
        return self.fs.os_rmdir(path)

    def statfs(self, path="/"):
        assert path == "/", path
        blocks = free = 0
        for cn in self.fs.iter_allocation_table():
            blocks += 1
            if cn == clfs.CLUSTER_FREE:
                free += 1
        return dict(
                f_bsize=self.fs.cluster_size,
                f_namemax=clfs.CLFS_NAMEMAX,
                f_blocks=blocks,
                f_bfree=free,
                f_bavail=free)

    def mknod(self, path, mode, rdev):
        logger.debug("mknod<-(%r, %o, %x)", path, mode, rdev)
        uid, gid = fuse_get_context()[:2]
        ret = self.fs.create_node(path, mode, uid, gid, rdev)
        logger.debug("mknod->%r", ret)
        return ret

    def write(self, path, buf, offset, fh=None):
        dirent = self.fs.get_dir_entry(path)
        bytes_written = self.fs.write_inode_data(dirent["ino"], offset, buf)
        assert bytes_written == len(buf), bytes_written
        # stupid python-fuse requires int, long generates EINVAL
        return int(bytes_written)

    def read(self, path, size, offset, fh=None):
        dirent = self.fs.get_dir_entry(path)
        return self.fs.read_node_data(dirent["ino"], offset, size)

    def truncate(self, path, size):
        self.fs.os_truncate(path, size)

    def chown(self, path, uid, gid):
        self.fs.os_chown(path, uid, gid)

    def chmod(self, path, mode):
        self.fs.os_chmod(path, mode)

    def unlink(self, path):
        self.fs.os_unlink(path)

def main():
    logging.basicConfig(level=logging.DEBUG)
    FUSE(
            FuseClfs(argv[1]), # fs(devpath)
            argv[2], # mountpoint
            foreground=True, # debug hooks provided by fusepy
            nothreads=True, # no locking in the filesystem yet
            default_permissions=True, # let the kernel handle perm checks
            fsname="clfs",
            #allow_other=True, # use this when running as root
        )

if __name__ == '__main__':
    main()
